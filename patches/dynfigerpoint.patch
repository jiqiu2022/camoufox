diff --git a/camoucfg/MaskConfig.hpp b/camoucfg/MaskConfig.hpp
index c2541634d2..88de995476 100644
--- a/camoucfg/MaskConfig.hpp
+++ b/camoucfg/MaskConfig.hpp
@@ -19,10 +19,32 @@ Written by daijro.
 #include <vector>
 #include <algorithm>
 
+// Add Mozilla Preferences support
+#ifdef MOZILLA_INTERNAL_API
+#include "mozilla/Preferences.h"
+#include "nsString.h"
+#endif
+
 #ifdef _WIN32
 #  include <windows.h>
 #endif
 
+// Global flag to control whether to use preferences
+namespace mozilla {
+  static bool gUseFingerprintPrefs = false;
+  
+  // Initialize preferences usage
+  static void InitFingerprintPrefs() {
+    static bool initialized = false;
+    if (!initialized) {
+#ifdef MOZILLA_INTERNAL_API
+      gUseFingerprintPrefs = Preferences::GetBool("camoufox.fingerprint.usePrefs", false);
+#endif
+      initialized = true;
+    }
+  }
+}
+
 namespace MaskConfig {
 
 // Function to get the value of an environment variable as a UTF-8 string.
@@ -47,9 +69,32 @@ inline std::optional<std::string> get_env_utf8(const std::string& name) {
 }
 
 inline const nlohmann::json& GetJson() {
-  static std::once_flag initFlag;
   static nlohmann::json jsonConfig;
+  static bool initialized = false;
+  
+  // Check if we should reload from preferences
+#ifdef MOZILLA_INTERNAL_API
+  mozilla::InitFingerprintPrefs();
+  if (mozilla::gUseFingerprintPrefs) {
+    nsAutoCString prefValue;
+    nsresult rv = mozilla::Preferences::GetCString("camoufox.fingerprint.config", prefValue);
+    if (NS_SUCCEEDED(rv) && !prefValue.IsEmpty()) {
+      if (nlohmann::json::accept(prefValue.get())) {
+        jsonConfig = nlohmann::json::parse(prefValue.get());
+        return jsonConfig;
+      } else {
+        printf_stderr("ERROR: Failed to parse fingerprint config from preferences\n");
+      }
+    }
+  }
+#endif
+
+  // If already initialized from env and not using prefs, return cached value
+  if (initialized && !mozilla::gUseFingerprintPrefs) {
+    return jsonConfig;
+  }
 
+  static std::once_flag initFlag;
   std::call_once(initFlag, []() {
     std::string jsonString;
     int index = 1;
@@ -71,6 +116,7 @@ inline const nlohmann::json& GetJson() {
 
     if (jsonString.empty()) {
       jsonConfig = nlohmann::json{};
+      initialized = true;
       return;
     }
 
@@ -78,20 +124,73 @@ inline const nlohmann::json& GetJson() {
     if (!nlohmann::json::accept(jsonString)) {
       printf_stderr("ERROR: Invalid JSON passed to CAMOU_CONFIG!\n");
       jsonConfig = nlohmann::json{};
+      initialized = true;
       return;
     }
 
     jsonConfig = nlohmann::json::parse(jsonString);
+    initialized = true;
   });
 
   return jsonConfig;
 }
 
+// Helper function to get value from preferences
+#ifdef MOZILLA_INTERNAL_API
+template<typename T>
+inline std::optional<T> GetFromPreference(const std::string& key) {
+  mozilla::InitFingerprintPrefs();
+  if (!mozilla::gUseFingerprintPrefs) {
+    return std::nullopt;
+  }
+  
+  nsAutoCString prefName("camoufox.fingerprint.");
+  prefName.Append(key.c_str());
+  
+  if constexpr (std::is_same_v<T, std::string>) {
+    nsAutoCString value;
+    nsresult rv = mozilla::Preferences::GetCString(prefName.get(), value);
+    if (NS_SUCCEEDED(rv)) {
+      return std::string(value.get());
+    }
+  } else if constexpr (std::is_integral_v<T>) {
+    // Firefox Preferences only supports int32_t, so we need to handle conversions
+    int32_t value;
+    nsresult rv = mozilla::Preferences::GetInt(prefName.get(), &value);
+    if (NS_SUCCEEDED(rv)) {
+      // Check for unsigned types and ensure non-negative values
+      if constexpr (std::is_unsigned_v<T>) {
+        if (value >= 0) {
+          return static_cast<T>(value);
+        }
+      } else {
+        return static_cast<T>(value);
+      }
+    }
+  }
+  return std::nullopt;
+}
+#endif
+
 inline bool HasKey(const std::string& key, const nlohmann::json& data) {
+#ifdef MOZILLA_INTERNAL_API
+  // Try preferences first if enabled
+  mozilla::InitFingerprintPrefs();
+  if (mozilla::gUseFingerprintPrefs) {
+    nsAutoCString prefName("camoufox.fingerprint.");
+    prefName.Append(key.c_str());
+    return mozilla::Preferences::HasUserValue(prefName.get());
+  }
+#endif
   return data.contains(key);
 }
 
 inline std::optional<std::string> GetString(const std::string& key) {
+#ifdef MOZILLA_INTERNAL_API
+  if (auto prefValue = GetFromPreference<std::string>(key)) {
+    return prefValue;
+  }
+#endif
   const auto& data = GetJson();
   if (!HasKey(key, data)) return std::nullopt;
   return data[key].get<std::string>();
@@ -118,6 +217,11 @@ inline std::vector<std::string> GetStringListLower(const std::string& key) {
 
 template <typename T>
 inline std::optional<T> GetUintImpl(const std::string& key) {
+#ifdef MOZILLA_INTERNAL_API
+  if (auto prefValue = GetFromPreference<T>(key)) {
+    return prefValue;
+  }
+#endif
   const auto& data = GetJson();
   if (!HasKey(key, data)) return std::nullopt;
   if (data[key].is_number_unsigned()) return data[key].get<T>();
@@ -135,6 +239,11 @@ inline std::optional<uint32_t> GetUint32(const std::string& key) {
 }
 
 inline std::optional<int32_t> GetInt32(const std::string& key) {
+#ifdef MOZILLA_INTERNAL_API
+  if (auto prefValue = GetFromPreference<int32_t>(key)) {
+    return prefValue;
+  }
+#endif
   const auto& data = GetJson();
   if (!HasKey(key, data)) return std::nullopt;
   if (data[key].is_number_integer()) return data[key].get<int32_t>();
@@ -143,6 +252,22 @@ inline std::optional<int32_t> GetInt32(const std::string& key) {
 }
 
 inline std::optional<double> GetDouble(const std::string& key) {
+#ifdef MOZILLA_INTERNAL_API
+  mozilla::InitFingerprintPrefs();
+  if (mozilla::gUseFingerprintPrefs) {
+    nsAutoCString prefName("camoufox.fingerprint.");
+    prefName.Append(key.c_str());
+    // Firefox doesn't have native double preferences, use string
+    nsAutoCString value;
+    if (NS_SUCCEEDED(mozilla::Preferences::GetCString(prefName.get(), value))) {
+      char* endptr;
+      double result = std::strtod(value.get(), &endptr);
+      if (endptr != value.get() && *endptr == '\0') {
+        return result;
+      }
+    }
+  }
+#endif
   const auto& data = GetJson();
   if (!HasKey(key, data)) return std::nullopt;
   if (data[key].is_number_float()) return data[key].get<double>();
@@ -153,6 +278,16 @@ inline std::optional<double> GetDouble(const std::string& key) {
 }
 
 inline std::optional<bool> GetBool(const std::string& key) {
+#ifdef MOZILLA_INTERNAL_API
+  mozilla::InitFingerprintPrefs();
+  if (mozilla::gUseFingerprintPrefs) {
+    nsAutoCString prefName("camoufox.fingerprint.");
+    prefName.Append(key.c_str());
+    if (mozilla::Preferences::HasUserValue(prefName.get())) {
+      return mozilla::Preferences::GetBool(prefName.get(), false);
+    }
+  }
+#endif
   const auto& data = GetJson();
   if (!HasKey(key, data)) return std::nullopt;
   if (data[key].is_boolean()) return data[key].get<bool>();
diff --git a/camoucfg/moz.build b/camoucfg/moz.build
index 3fe87d2f26..4d6d5bb394 100644
--- a/camoucfg/moz.build
+++ b/camoucfg/moz.build
@@ -16,4 +16,7 @@ LOCAL_INCLUDES += [
     "/camoucfg",
 ]
 
+# Define MOZILLA_INTERNAL_API to enable Preferences access
+DEFINES['MOZILLA_INTERNAL_API'] = True
+
 FINAL_LIBRARY = "xul"
\ No newline at end of file
